#ifndef CIRCULAR_ARC2D_H
#define CIRCULAR_ARC2D_H

#include<cassert>
#include<vector>
#include<cmath>
#include"Curve2D_Base.h"
#include"../../Math/Math_Constants.h"

namespace knoblauch {

 class Circular_Arc2D : public Curve2D_Base {
 protected:

   Vector2D node_origin;
   Vector2D node_begin;
   float_type angle;
 public:
   Vector2D get_position_at_s(float_type s) {
     float_type r = sqrt((node_begin.x()-node_origin.x())*(node_begin.x()-node_origin.x())+(node_begin.y()-node_origin.y())*(node_begin.y()-node_origin.y()));
     float_type theta = atan((node_begin.y()-node_origin.y())/(node_begin.x()-node_origin.x()));
       Vector2D node_recent;
			     node_recent.x() = node_origin.x()+r*cos(angle*s+theta);
			     node_recent.y() = node_origin.y()+r*sin(angle*s+theta);
     return node_recent;
   }

   Circular_Arc2D(const Vector2D &origin,
		  const Vector2D &begin,
		  float_type angle_in) :
   node_origin(origin),
   node_begin(begin),
   angle(angle_in) {}
   };
 }

#endif
